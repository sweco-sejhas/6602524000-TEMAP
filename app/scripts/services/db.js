// Generated by CoffeeScript 1.6.1
(function() {
  'use strict';
  angular.module('TEMAPApp').factory('db', function() {
    var dbVersion, idb, req, timeoutId, updateVersion;
    timeoutId = null;
    idb = null;
    dbVersion = 2;
    req = indexedDB.open('TEMAP_DB', dbVersion);
    req.onsuccess = function(evt) {
      var db, versionReq;
      db = req.result;
      if (db.setVersion != null) {
        if (db.version !== dbVersion) {
          versionReq = db.setVersion(dbVersion);
          return versionReq.onsuccess = function() {
            var osData, osVersion;
            if (db.objectStoreNames.contains('dataVersion')) {
              db.deleteObjectStore('dataVersion');
            }
            if (db.objectStoreNames.contains('data')) {
              db.deleteObjectStore('data');
            }
            osVersion = db.createObjectStore('dataVersion', {
              keyPath: 'n'
            });
            osData = db.createObjectStore('data', {
              keyPath: 'n'
            });
            return versionReq.result.oncomplete = function() {
              return idb = db;
            };
          };
        }
      } else {
        return idb = db;
      }
    };
    req.onupgradeneeded = function(evt) {
      var db, osData, osVersion;
      db = evt.target.result;
      osVersion = db.createObjectStore('dataVersion', {
        keyPath: 'n'
      });
      return osData = db.createObjectStore('data', {
        keyPath: 'n'
      });
    };
    req.onerror = function(evt) {
      return console.log('IndexedDB error: ' + evt.target.errorCode);
    };
    updateVersion = function(name, version, cb) {
      var store, transaction;
      transaction = idb.transaction(['dataVersion'], 'readwrite');
      store = transaction.objectStore('dataVersion');
      req = store.put({
        n: name,
        version: version
      });
      req.onerror = function(evt) {};
      return req.onsuccess = function(evt) {
        return cb();
      };
    };
    return {
      initDb: function(cb) {
        var scope;
        scope = this;
        if (idb === null) {
          return timeoutId = setTimeout(function() {
            return scope.initDb(cb);
          }, 10);
        } else {
          return cb();
        }
      },
      needsUpdate: function(name, version, update, noUpdate) {
        var store, transaction;
        transaction = idb.transaction(['dataVersion'], 'readwrite');
        store = transaction.objectStore('dataVersion');
        req = store.get(name);
        req.onerror = function(evt) {
          return console.log('IndexedDB error: ' + evt.target.errorCode);
        };
        return req.onsuccess = function(evt) {
          if ((evt.target.result == null) || evt.target.result.version !== version) {
            return update(name, version);
          } else {
            return noUpdate(name);
          }
        };
      },
      persist: function(name, version, data, cb) {
        var store, transaction;
        transaction = idb.transaction(['data'], 'readwrite');
        transaction.oncomplete = function() {};
        transaction.onerror = function(ev) {};
        store = transaction.objectStore('data');
        req = store.put({
          n: name,
          data: data
        });
        req.onerror = function(evt) {};
        return req.onsuccess = function(evt) {
          return updateVersion(name, version, cb);
        };
      },
      getAsArray: function(name, cb) {
        var store, transaction;
        transaction = idb.transaction(['data'], 'readwrite');
        transaction.oncomplete = function() {};
        store = transaction.objectStore('data');
        req = store.get(name);
        req.onerror = function(evt) {};
        return req.onsuccess = function(evt) {
          return cb(evt.target.result.data);
        };
      }
    };
  });

}).call(this);
