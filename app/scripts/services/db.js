// Generated by CoffeeScript 1.6.1
(function() {
  'use strict';
  angular.module('TEMAPApp').factory('db', function() {
    var idb, req, timeoutId, updateVersion;
    timeoutId = null;
    idb = null;
    req = indexedDB.open('TEMAP_DB', 2);
    req.onsuccess = function(evt) {
      return idb = req.result;
    };
    req.onupgradeneeded = function(evt) {
      var db, osData, osVersion;
      db = evt.target.result;
      osVersion = db.createObjectStore('dataVersion', {
        keyPath: 'n'
      });
      return osData = db.createObjectStore('data', {
        keyPath: 'n'
      });
    };
    req.onerror = function(evt) {
      return console.log('IndexedDB error: ' + evt.target.errorCode);
    };
    updateVersion = function(name, version, cb) {
      var store, transaction;
      transaction = idb.transaction(['dataVersion'], 'readwrite');
      store = transaction.objectStore('dataVersion');
      req = store.put({
        n: name,
        version: version
      });
      req.onerror = function(evt) {};
      return req.onsuccess = function(evt) {
        return cb();
      };
    };
    return {
      initDb: function(cb) {
        var scope;
        scope = this;
        if (idb === null) {
          return timeoutId = setTimeout(function() {
            return scope.initDb(cb);
          }, 10);
        } else {
          return cb();
        }
      },
      needsUpdate: function(name, version, update, noUpdate) {
        var store, transaction;
        console.log('0 needsUpdate::' + name);
        transaction = idb.transaction(['dataVersion'], 'readwrite');
        console.log('1 needsUpdate::' + name);
        store = transaction.objectStore('dataVersion');
        console.log('2 needsUpdate::' + name);
        req = store.get(name);
        console.log('3 needsUpdate::' + name);
        req.onerror = function(evt) {
          console.log('4 needsUpdate::' + name);
          return console.log('IndexedDB error: ' + evt.target.errorCode);
        };
        return req.onsuccess = function(evt) {
          console.log('5 needsUpdate::' + name);
          if ((evt.target.result == null) || evt.target.result.version !== version) {
            console.log('6 needsUpdate::' + name);
            return update(name, version);
          } else {
            console.log('7 needsUpdate::' + name);
            return noUpdate(name);
          }
        };
      },
      persist: function(name, version, data, cb) {
        var store, transaction;
        transaction = idb.transaction(['data'], 'readwrite');
        transaction.oncomplete = function() {};
        transaction.onerror = function(ev) {};
        store = transaction.objectStore('data');
        req = store.put({
          n: name,
          data: data
        });
        req.onerror = function(evt) {};
        return req.onsuccess = function(evt) {
          return updateVersion(name, version, cb);
        };
      },
      getAsArray: function(name, cb) {
        var store, transaction;
        transaction = idb.transaction(['data'], 'readwrite');
        transaction.oncomplete = function() {};
        store = transaction.objectStore('data');
        req = store.get(name);
        req.onerror = function(evt) {};
        return req.onsuccess = function(evt) {
          return cb(evt.target.result.data);
        };
      }
    };
  });

}).call(this);
