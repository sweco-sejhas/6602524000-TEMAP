// Generated by CoffeeScript 1.6.1
(function() {
  'use strict';
  angular.module('TEMAPApp').factory('data', function($rootScope, $http, db, mergeSort, loadMessage) {
    var broadcast, closestItems, expectedcount, fetch, loadcount, noCache, scope, selectedItem, selectedType, update;
    selectedType = null;
    closestItems = [];
    selectedItem = null;
    scope = null;
    expectedcount = 3;
    loadcount = 0;
    noCache = function() {
      return '?nocache=' + (new Date()).getTime();
    };
    broadcast = function(name) {
      loadcount++;
      if (loadcount === expectedcount) {
        return $rootScope.$broadcast('data::dataUpdated');
      }
    };
    update = function(name, version) {
      loadMessage.remove('Kontrollerar version av databas');
      loadMessage.add('Uppdaterar databasen');
      return $http.get('data/' + name + '.json' + noCache()).then(function(res) {
        return db.initDb(function() {
          return db.persist(name, version, res.data, function() {
            loadMessage.remove('Uppdaterar databasen');
            return fetch(name);
          });
        });
      });
    };
    fetch = function(name) {
      loadMessage.remove('Kontrollerar version av databas');
      return db.getAsArray(name, function(arr) {
        scope[name] = arr;
        return broadcast(name);
      });
    };
    return {
      update: function() {
        scope = this;
        return $http.get('data/version.json' + noCache()).then(function(res) {
          return db.initDb(function() {
            var k, v, versions;
            versions = res.data;
            for (k in versions) {
              v = versions[k];
              loadMessage.add('Kontrollerar version av databas');
              db.needsUpdate(k, v, update, fetch);
            }
            return 1;
          });
        });
      },
      setSelectedType: function(t) {
        return selectedType = t;
      },
      setSelectedItem: function(item, cb) {
        selectedItem = item;
        return this.setClosestItems(item, cb);
      },
      getSelectedItem: function() {
        return selectedItem;
      },
      estimateDistance: function(items, base) {
        var item, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          _results.push(item.dist = (Math.pow(item.la - base.la, 2)) + (Math.pow(item.lo - base.lo, 2)));
        }
        return _results;
      },
      setClosestItems: function(item, cb) {
        var candidates;
        candidates = this[selectedType].slice(0);
        this.estimateDistance(candidates, item);
        mergeSort.sort(candidates, 'dist', function(sorted) {
          closestItems = sorted.slice(1, 102);
          return cb();
        });
        return closestItems = [];
      },
      getClosestItems: function() {
        return closestItems;
      }
    };
  });

}).call(this);
