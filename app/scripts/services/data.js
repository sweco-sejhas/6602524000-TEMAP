// Generated by CoffeeScript 1.6.1
(function() {
  'use strict';
  angular.module('TEMAPApp').factory('data', function($rootScope, $http, db, loadMessage) {
    var broadcast, closestItems, comp, expectedcount, fetch, loadcount, noCache, objectSources, scope, selectedItem, selectedType, update;
    scope = null;
    selectedType = null;
    closestItems = [];
    selectedItem = null;
    objectSources = ['belysningsstolpe', 'kabelskap', 'natstation'];
    expectedcount = objectSources.length;
    loadcount = 0;
    comp = function(x, y) {
      if (x.dist < y.dist) {
        return -1;
      } else if (x.dist > y.dist) {
        return 1;
      } else {
        return 0;
      }
    };
    noCache = function() {
      return '?nocache=' + (new Date()).getTime();
    };
    broadcast = function(name) {
      loadcount++;
      if (loadcount === expectedcount) {
        return $rootScope.$broadcast('data::dataUpdated');
      }
    };
    update = function(name, version) {
      loadMessage.remove('Kontrollerar version av databas');
      loadMessage.add('Uppdaterar databasen');
      return $http.get('data/' + name + '.json' + noCache()).then(function(res) {
        return db.initDb(function() {
          return db.persist(name, version, res.data, function() {
            loadMessage.remove('Uppdaterar databasen');
            return fetch(name);
          });
        });
      });
    };
    fetch = function(name) {
      loadMessage.remove('Kontrollerar version av databas');
      return db.getAsArray(name, function(arr) {
        scope[name] = arr;
        return broadcast(name);
      });
    };
    return {
      update: function() {
        var source, _i, _len, _results;
        scope = this;
        _results = [];
        for (_i = 0, _len = objectSources.length; _i < _len; _i++) {
          source = objectSources[_i];
          _results.push($http.get('data/' + source + '_version.json' + noCache()).then(function(res) {
            return db.initDb(function() {
              var id, version;
              version = res.data.version;
              id = res.data.id;
              loadMessage.add('Kontrollerar version av databas');
              db.needsUpdate(id, version, update, fetch);
              return 0;
            });
          }));
        }
        return _results;
      },
      setSelectedType: function(t) {
        return selectedType = t;
      },
      setSelectedItem: function(item) {
        selectedItem = item;
        return this.setClosestItems(item);
      },
      getDataArray: function() {
        return this[selectedType];
      },
      getSelectedItem: function() {
        return selectedItem;
      },
      estimateDistance: function(items, base) {
        var item, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          _results.push(item.dist = (Math.pow(item.la - base.la, 2)) + (Math.pow(item.lo - base.lo, 2)));
        }
        return _results;
      },
      setClosestItems: function(item) {
        var candidates;
        candidates = this[selectedType].slice(0);
        this.estimateDistance(candidates, item);
        return closestItems = this.pickNClosest(100, candidates);
      },
      pickNClosest: function(nbr, items) {
        var count, currItems, i, item, _i, _ref;
        currItems = [];
        count = 0;
        for (i = _i = _ref = items.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          item = items[i];
          if (count < nbr) {
            count++;
            Heap.insort(currItems, item, null, null, comp);
            items.splice(i, 1);
          } else if (item.dist < currItems[currItems.length - 1].dist) {
            Heap.insort(currItems, item, null, null, comp);
            currItems.pop();
            items.splice(i, 1);
          }
        }
        return currItems;
      },
      getClosestItems: function() {
        return closestItems;
      }
    };
  });

}).call(this);
