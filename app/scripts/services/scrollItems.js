// Generated by CoffeeScript 1.6.1
(function() {
  'use strict';
  angular.module('TEMAPApp').factory('scrollItems', function(mergeSort, data) {
    var baseItems, comp, distHeap, end, items, numberItems, start;
    items = [];
    numberItems = 50;
    start = 0;
    end = numberItems;
    baseItems = null;
    comp = function(x, y) {
      if (x.dist < y.dist) {
        return -1;
      } else if (x.dist > y.dist) {
        return 1;
      } else {
        return 0;
      }
    };
    distHeap = new Heap(comp);
    return {
      positionUnavailable: true,
      totalSize: 0,
      currentItems: [],
      bottomPadSize: 0,
      topPadSize: 0,
      offset: 0,
      geoSort: false,
      getBaseItems: function() {
        return baseItems;
      },
      estimateDistance: function() {
        var item, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = baseItems.length; _i < _len; _i++) {
          item = baseItems[_i];
          _results.push(item.dist = (Math.pow(item.la - this.pos.latitude, 2)) + (Math.pow(item.lo - this.pos.longitude, 2)));
        }
        return _results;
      },
      toggleGeoSort: function(cb, state) {
        if (state == null) {
          state = !this.geoSort;
        }
        this.geoSort = state;
        if (this.geoSort) {
          return this.setItems(items);
        } else {
          return this.setItems(baseItems.slice(0));
        }
      },
      setLocation: function(pos) {
        this.positionUnavailable = false;
        this.pos = pos;
        if (baseItems != null) {
          return this.estimateDistance();
        }
      },
      pickNClosest: function(nbr) {
        var count, currItems, i, item, _i, _ref;
        currItems = [];
        count = 0;
        for (i = _i = _ref = items.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
          item = items[i];
          if (count < nbr) {
            count++;
            Heap.insort(currItems, item, null, null, comp);
            items.splice(i, 1);
          } else if (item.dist < currItems[currItems.length - 1].dist) {
            Heap.insort(currItems, item, null, null, comp);
            currItems.pop();
            items.splice(i, 1);
          }
        }
        return currItems;
      },
      setItems: function(arr) {
        var currItems;
        items = arr;
        if (this.geoSort) {
          currItems = this.pickNClosest(numberItems);
          this.currentItems = currItems;
        } else {
          end = numberItems;
          this.currentItems = items.slice(0, +end + 1 || 9e9);
        }
        return $(window).scrollTop(0);
      },
      setBaseItems: function(arr) {
        baseItems = arr;
        if (this.pos != null) {
          this.estimateDistance();
        }
        return this.setItems(baseItems.slice(0));
      },
      loadMore: function(ev) {
        if (this.geoSort) {
          return Array.prototype.push.apply(this.currentItems, this.pickNClosest(numberItems));
        } else {
          return this.currentItems = items.slice(0, +(end += numberItems) + 1 || 9e9);
        }
      }
    };
  });

}).call(this);
