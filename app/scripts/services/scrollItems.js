// Generated by CoffeeScript 1.6.1
(function() {
  'use strict';
  angular.module('TEMAPApp').factory('scrollItems', function(mergeSort, data) {
    var baseItems, comp, distHeap, end, items, numberItems, start;
    items = [];
    numberItems = 50;
    start = 0;
    end = numberItems;
    baseItems = null;
    comp = function(x, y) {
      if (x.dist < y.dist) {
        return -1;
      } else if (x.dist > y.dist) {
        return 1;
      } else {
        return 0;
      }
    };
    distHeap = new Heap(comp);
    return {
      positionUnavailable: true,
      totalSize: 0,
      currentItems: [],
      bottomPadSize: 0,
      topPadSize: 0,
      offset: 0,
      geoSort: false,
      getBaseItems: function() {
        return baseItems;
      },
      executeNameSort: function(cb) {
        return setTimeout(function() {
          return cb(data.getDataArray());
        }, 0);
      },
      executeGeoSort: function(cb) {
        var sorted;
        sorted = baseItems.slice(0);
        /*max = Number.MAX_VALUE
        count = 0
        
        result = []
        
        for item in sorted
          if item.dist < max
            max = item.dist
            
          if count < 100
            result.push item
          else if item.dist < max
            result.push item
        */

        /*setTimeout ->
          cb (Heap.nsmallest sorted,50,comp),
         ,0
        */

        return setTimeout(function() {
          return cb(sorted);
        }, 0);
      },
      estimateDistance: function() {
        var item, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = baseItems.length; _i < _len; _i++) {
          item = baseItems[_i];
          _results.push(item.dist = (Math.pow(item.la - this.pos.latitude, 2)) + (Math.pow(item.lo - this.pos.longitude, 2)));
        }
        return _results;
      },
      toggleGeoSort: function(cb, state) {
        if (state == null) {
          state = !this.geoSort;
        }
        this.geoSort = state;
        if (this.geoSort) {
          return this.setItems(items);
        } else {
          return this.setItems(baseItems.slice(0));
        }
        /*if this.geoSort
          this.estimateDistance()
          this.executeGeoSort(cb)
        else
          this.executeNameSort(cb)
        */

      },
      setLocation: function(pos) {
        this.positionUnavailable = false;
        this.pos = pos;
        if (baseItems != null) {
          return this.estimateDistance();
        }
      },
      setItems: function(arr) {
        var count, currItems, i, item, _i, _ref;
        items = arr;
        if (this.geoSort) {
          count = 0;
          currItems = [];
          for (i = _i = _ref = items.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
            item = items[i];
            if (count < numberItems) {
              count++;
              Heap.insort(currItems, item, null, null, comp);
              items.splice(i, 1);
            } else if (item.dist < currItems[currItems.length - 1].dist) {
              Heap.insort(currItems, item, null, null, comp);
              currItems.pop();
              items.splice(i, 1);
            }
          }
          this.currentItems = currItems;
        } else {
          end = numberItems;
          this.currentItems = items.slice(0, +end + 1 || 9e9);
        }
        return $(window).scrollTop(0);
      },
      setBaseItems: function(arr) {
        baseItems = arr;
        if (this.pos != null) {
          this.estimateDistance();
        }
        return this.setItems(baseItems.slice(0));
      },
      loadMore: function(ev) {
        return this.currentItems = items.slice(0, +(end += numberItems) + 1 || 9e9);
      }
    };
  });

}).call(this);
